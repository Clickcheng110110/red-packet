/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface AwardCenterInterface extends utils.Interface {
  functions: {
    "astrErc20()": FunctionFragment;
    "getBalance(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "releaseToken(address,uint256,uint8)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawBNB(address)": FunctionFragment;
    "withdrawToken(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "astrErc20"
      | "getBalance"
      | "owner"
      | "releaseToken"
      | "renounceOwnership"
      | "transferOwnership"
      | "withdraw"
      | "withdrawBNB"
      | "withdrawToken"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "astrErc20", values?: undefined): string;
  encodeFunctionData(functionFragment: "getBalance", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdrawBNB", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "astrErc20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBNB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "releaseTokenEvent(address,uint256,uint8)": EventFragment;
    "withdrawTokenEvent(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "releaseTokenEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "withdrawTokenEvent"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface releaseTokenEventEventObject {
  user: string;
  amount: BigNumber;
  releaseType: number;
}
export type releaseTokenEventEvent = TypedEvent<
  [string, BigNumber, number],
  releaseTokenEventEventObject
>;

export type releaseTokenEventEventFilter =
  TypedEventFilter<releaseTokenEventEvent>;

export interface withdrawTokenEventEventObject {
  user: string;
  amount: BigNumber;
}
export type withdrawTokenEventEvent = TypedEvent<
  [string, BigNumber],
  withdrawTokenEventEventObject
>;

export type withdrawTokenEventEventFilter =
  TypedEventFilter<withdrawTokenEventEvent>;

export interface AwardCenter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AwardCenterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    astrErc20(overrides?: CallOverrides): Promise<[string]>;

    getBalance(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    releaseToken(
      user: string,
      amount: BigNumberish,
      releaseType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawBNB(
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawToken(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  astrErc20(overrides?: CallOverrides): Promise<string>;

  getBalance(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  releaseToken(
    user: string,
    amount: BigNumberish,
    releaseType: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawBNB(
    recipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawToken(
    _tokenAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    astrErc20(overrides?: CallOverrides): Promise<string>;

    getBalance(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    releaseToken(
      user: string,
      amount: BigNumberish,
      releaseType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdrawBNB(recipient: string, overrides?: CallOverrides): Promise<void>;

    withdrawToken(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "releaseTokenEvent(address,uint256,uint8)"(
      user?: string | null,
      amount?: BigNumberish | null,
      releaseType?: null
    ): releaseTokenEventEventFilter;
    releaseTokenEvent(
      user?: string | null,
      amount?: BigNumberish | null,
      releaseType?: null
    ): releaseTokenEventEventFilter;

    "withdrawTokenEvent(address,uint256)"(
      user?: string | null,
      amount?: BigNumberish | null
    ): withdrawTokenEventEventFilter;
    withdrawTokenEvent(
      user?: string | null,
      amount?: BigNumberish | null
    ): withdrawTokenEventEventFilter;
  };

  estimateGas: {
    astrErc20(overrides?: CallOverrides): Promise<BigNumber>;

    getBalance(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    releaseToken(
      user: string,
      amount: BigNumberish,
      releaseType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawBNB(
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawToken(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    astrErc20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBalance(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseToken(
      user: string,
      amount: BigNumberish,
      releaseType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawBNB(
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}

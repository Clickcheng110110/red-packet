/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace NftMarketplace {
  export type ListingStruct = { price: BigNumberish; seller: string };

  export type ListingStructOutput = [BigNumber, string] & {
    price: BigNumber;
    seller: string;
  };
}

export interface NftMarketInterface extends utils.Interface {
  functions: {
    "astrBurn()": FunctionFragment;
    "astrErc20()": FunctionFragment;
    "awardAddress()": FunctionFragment;
    "buyItem(uint256)": FunctionFragment;
    "cancelListing(uint256)": FunctionFragment;
    "emergencyCancelList(uint256)": FunctionFragment;
    "endTime()": FunctionFragment;
    "getListing(uint256)": FunctionFragment;
    "getNextPriceAndFee(uint256,uint256)": FunctionFragment;
    "isBuy()": FunctionFragment;
    "isSell()": FunctionFragment;
    "listItem(uint256,uint256)": FunctionFragment;
    "lsErc20()": FunctionFragment;
    "marketAddrss()": FunctionFragment;
    "nftAddress()": FunctionFragment;
    "nftIdo()": FunctionFragment;
    "owner()": FunctionFragment;
    "pair()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAddress(address,address)": FunctionFragment;
    "setRoundInfo(uint256,uint256,uint256,uint8)": FunctionFragment;
    "setStart(bool,bool)": FunctionFragment;
    "split(uint256,uint256)": FunctionFragment;
    "star()": FunctionFragment;
    "startTime()": FunctionFragment;
    "totalShare()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usdtAddress()": FunctionFragment;
    "withdraw(address)": FunctionFragment;
    "withdrawToken(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "astrBurn"
      | "astrErc20"
      | "awardAddress"
      | "buyItem"
      | "cancelListing"
      | "emergencyCancelList"
      | "endTime"
      | "getListing"
      | "getNextPriceAndFee"
      | "isBuy"
      | "isSell"
      | "listItem"
      | "lsErc20"
      | "marketAddrss"
      | "nftAddress"
      | "nftIdo"
      | "owner"
      | "pair"
      | "renounceOwnership"
      | "setAddress"
      | "setRoundInfo"
      | "setStart"
      | "split"
      | "star"
      | "startTime"
      | "totalShare"
      | "transferOwnership"
      | "usdtAddress"
      | "withdraw"
      | "withdrawToken"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "astrBurn", values?: undefined): string;
  encodeFunctionData(functionFragment: "astrErc20", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "awardAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyCancelList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextPriceAndFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isBuy", values?: undefined): string;
  encodeFunctionData(functionFragment: "isSell", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "listItem",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lsErc20", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "marketAddrss",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nftIdo", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pair", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoundInfo",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStart",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "split",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "star", values?: undefined): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "usdtAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "astrBurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "astrErc20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "awardAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyCancelList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNextPriceAndFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isBuy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isSell", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lsErc20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketAddrss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftIdo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRoundInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStart", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "split", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "star", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalShare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdtAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "ItemBought(address,uint256,address,uint256)": EventFragment;
    "ItemCanceled(address,uint256)": EventFragment;
    "ItemListed(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "burnEvent(address,uint256)": EventFragment;
    "mintEvent(address,uint256,uint8,uint256,uint8)": EventFragment;
    "nodeFeeShare(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ItemBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "burnEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "mintEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "nodeFeeShare"): EventFragment;
}

export interface ItemBoughtEventObject {
  buyer: string;
  tokenId: BigNumber;
  seller: string;
  price: BigNumber;
}
export type ItemBoughtEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  ItemBoughtEventObject
>;

export type ItemBoughtEventFilter = TypedEventFilter<ItemBoughtEvent>;

export interface ItemCanceledEventObject {
  seller: string;
  tokenId: BigNumber;
}
export type ItemCanceledEvent = TypedEvent<
  [string, BigNumber],
  ItemCanceledEventObject
>;

export type ItemCanceledEventFilter = TypedEventFilter<ItemCanceledEvent>;

export interface ItemListedEventObject {
  seller: string;
  tokenId: BigNumber;
  price: BigNumber;
}
export type ItemListedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ItemListedEventObject
>;

export type ItemListedEventFilter = TypedEventFilter<ItemListedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface burnEventEventObject {
  user: string;
  tokenId: BigNumber;
}
export type burnEventEvent = TypedEvent<
  [string, BigNumber],
  burnEventEventObject
>;

export type burnEventEventFilter = TypedEventFilter<burnEventEvent>;

export interface mintEventEventObject {
  user: string;
  tokenId: BigNumber;
  age: number;
  price: BigNumber;
  star: number;
}
export type mintEventEvent = TypedEvent<
  [string, BigNumber, number, BigNumber, number],
  mintEventEventObject
>;

export type mintEventEventFilter = TypedEventFilter<mintEventEvent>;

export interface nodeFeeShareEventObject {
  user: string;
  root: string;
  fee: BigNumber;
}
export type nodeFeeShareEvent = TypedEvent<
  [string, string, BigNumber],
  nodeFeeShareEventObject
>;

export type nodeFeeShareEventFilter = TypedEventFilter<nodeFeeShareEvent>;

export interface NftMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NftMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    astrBurn(overrides?: CallOverrides): Promise<[string]>;

    astrErc20(overrides?: CallOverrides): Promise<[string]>;

    awardAddress(overrides?: CallOverrides): Promise<[string]>;

    buyItem(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    cancelListing(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    emergencyCancelList(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    endTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getListing(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[NftMarketplace.ListingStructOutput]>;

    getNextPriceAndFee(
      tokenId: BigNumberish,
      lsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        fee: BigNumber;
        maxLs: BigNumber;
      }
    >;

    isBuy(overrides?: CallOverrides): Promise<[boolean]>;

    isSell(overrides?: CallOverrides): Promise<[boolean]>;

    listItem(
      tokenId: BigNumberish,
      lsAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    lsErc20(overrides?: CallOverrides): Promise<[string]>;

    marketAddrss(overrides?: CallOverrides): Promise<[string]>;

    nftAddress(overrides?: CallOverrides): Promise<[string]>;

    nftIdo(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pair(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAddress(
      _awardAddress: string,
      _marketAddrss: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRoundInfo(
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _totalShare: BigNumberish,
      _star: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setStart(
      _isBuy: boolean,
      _isSell: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    split(
      tokenId: BigNumberish,
      lsAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    star(overrides?: CallOverrides): Promise<[number]>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    usdtAddress(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawToken(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  astrBurn(overrides?: CallOverrides): Promise<string>;

  astrErc20(overrides?: CallOverrides): Promise<string>;

  awardAddress(overrides?: CallOverrides): Promise<string>;

  buyItem(
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  cancelListing(
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  emergencyCancelList(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  endTime(overrides?: CallOverrides): Promise<BigNumber>;

  getListing(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<NftMarketplace.ListingStructOutput>;

  getNextPriceAndFee(
    tokenId: BigNumberish,
    lsAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      price: BigNumber;
      fee: BigNumber;
      maxLs: BigNumber;
    }
  >;

  isBuy(overrides?: CallOverrides): Promise<boolean>;

  isSell(overrides?: CallOverrides): Promise<boolean>;

  listItem(
    tokenId: BigNumberish,
    lsAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  lsErc20(overrides?: CallOverrides): Promise<string>;

  marketAddrss(overrides?: CallOverrides): Promise<string>;

  nftAddress(overrides?: CallOverrides): Promise<string>;

  nftIdo(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pair(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAddress(
    _awardAddress: string,
    _marketAddrss: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRoundInfo(
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    _totalShare: BigNumberish,
    _star: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setStart(
    _isBuy: boolean,
    _isSell: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  split(
    tokenId: BigNumberish,
    lsAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  star(overrides?: CallOverrides): Promise<number>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  totalShare(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  usdtAddress(overrides?: CallOverrides): Promise<string>;

  withdraw(
    recipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawToken(
    _tokenAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    astrBurn(overrides?: CallOverrides): Promise<string>;

    astrErc20(overrides?: CallOverrides): Promise<string>;

    awardAddress(overrides?: CallOverrides): Promise<string>;

    buyItem(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    cancelListing(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyCancelList(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    getListing(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<NftMarketplace.ListingStructOutput>;

    getNextPriceAndFee(
      tokenId: BigNumberish,
      lsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        fee: BigNumber;
        maxLs: BigNumber;
      }
    >;

    isBuy(overrides?: CallOverrides): Promise<boolean>;

    isSell(overrides?: CallOverrides): Promise<boolean>;

    listItem(
      tokenId: BigNumberish,
      lsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lsErc20(overrides?: CallOverrides): Promise<string>;

    marketAddrss(overrides?: CallOverrides): Promise<string>;

    nftAddress(overrides?: CallOverrides): Promise<string>;

    nftIdo(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pair(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAddress(
      _awardAddress: string,
      _marketAddrss: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoundInfo(
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _totalShare: BigNumberish,
      _star: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStart(
      _isBuy: boolean,
      _isSell: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    split(
      tokenId: BigNumberish,
      lsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    star(overrides?: CallOverrides): Promise<number>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    totalShare(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usdtAddress(overrides?: CallOverrides): Promise<string>;

    withdraw(recipient: string, overrides?: CallOverrides): Promise<void>;

    withdrawToken(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ItemBought(address,uint256,address,uint256)"(
      buyer?: string | null,
      tokenId?: BigNumberish | null,
      seller?: null,
      price?: null
    ): ItemBoughtEventFilter;
    ItemBought(
      buyer?: string | null,
      tokenId?: BigNumberish | null,
      seller?: null,
      price?: null
    ): ItemBoughtEventFilter;

    "ItemCanceled(address,uint256)"(
      seller?: string | null,
      tokenId?: BigNumberish | null
    ): ItemCanceledEventFilter;
    ItemCanceled(
      seller?: string | null,
      tokenId?: BigNumberish | null
    ): ItemCanceledEventFilter;

    "ItemListed(address,uint256,uint256)"(
      seller?: string | null,
      tokenId?: BigNumberish | null,
      price?: null
    ): ItemListedEventFilter;
    ItemListed(
      seller?: string | null,
      tokenId?: BigNumberish | null,
      price?: null
    ): ItemListedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "burnEvent(address,uint256)"(
      user?: string | null,
      tokenId?: BigNumberish | null
    ): burnEventEventFilter;
    burnEvent(
      user?: string | null,
      tokenId?: BigNumberish | null
    ): burnEventEventFilter;

    "mintEvent(address,uint256,uint8,uint256,uint8)"(
      user?: string | null,
      tokenId?: BigNumberish | null,
      age?: null,
      price?: null,
      star?: null
    ): mintEventEventFilter;
    mintEvent(
      user?: string | null,
      tokenId?: BigNumberish | null,
      age?: null,
      price?: null,
      star?: null
    ): mintEventEventFilter;

    "nodeFeeShare(address,address,uint256)"(
      user?: string | null,
      root?: string | null,
      fee?: null
    ): nodeFeeShareEventFilter;
    nodeFeeShare(
      user?: string | null,
      root?: string | null,
      fee?: null
    ): nodeFeeShareEventFilter;
  };

  estimateGas: {
    astrBurn(overrides?: CallOverrides): Promise<BigNumber>;

    astrErc20(overrides?: CallOverrides): Promise<BigNumber>;

    awardAddress(overrides?: CallOverrides): Promise<BigNumber>;

    buyItem(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    cancelListing(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    emergencyCancelList(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    getListing(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextPriceAndFee(
      tokenId: BigNumberish,
      lsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBuy(overrides?: CallOverrides): Promise<BigNumber>;

    isSell(overrides?: CallOverrides): Promise<BigNumber>;

    listItem(
      tokenId: BigNumberish,
      lsAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    lsErc20(overrides?: CallOverrides): Promise<BigNumber>;

    marketAddrss(overrides?: CallOverrides): Promise<BigNumber>;

    nftAddress(overrides?: CallOverrides): Promise<BigNumber>;

    nftIdo(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pair(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAddress(
      _awardAddress: string,
      _marketAddrss: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRoundInfo(
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _totalShare: BigNumberish,
      _star: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setStart(
      _isBuy: boolean,
      _isSell: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    split(
      tokenId: BigNumberish,
      lsAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    star(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    totalShare(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    usdtAddress(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawToken(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    astrBurn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    astrErc20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    awardAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyItem(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    cancelListing(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emergencyCancelList(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    endTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getListing(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextPriceAndFee(
      tokenId: BigNumberish,
      lsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBuy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSell(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listItem(
      tokenId: BigNumberish,
      lsAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    lsErc20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketAddrss(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftIdo(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAddress(
      _awardAddress: string,
      _marketAddrss: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRoundInfo(
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _totalShare: BigNumberish,
      _star: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setStart(
      _isBuy: boolean,
      _isSell: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    split(
      tokenId: BigNumberish,
      lsAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    star(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    usdtAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface NftMergeInterface extends utils.Interface {
  functions: {
    "addMerge(uint256[])": FunctionFragment;
    "allAward()": FunctionFragment;
    "astrErc20()": FunctionFragment;
    "ids()": FunctionFragment;
    "lsErc20()": FunctionFragment;
    "mergeDeal(uint256,uint8,uint256,uint256)": FunctionFragment;
    "mergeInfoMapping(uint256)": FunctionFragment;
    "nftAddress()": FunctionFragment;
    "nftErc721()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(address)": FunctionFragment;
    "withdrawToken(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addMerge"
      | "allAward"
      | "astrErc20"
      | "ids"
      | "lsErc20"
      | "mergeDeal"
      | "mergeInfoMapping"
      | "nftAddress"
      | "nftErc721"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "withdraw"
      | "withdrawToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addMerge",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "allAward", values?: undefined): string;
  encodeFunctionData(functionFragment: "astrErc20", values?: undefined): string;
  encodeFunctionData(functionFragment: "ids", values?: undefined): string;
  encodeFunctionData(functionFragment: "lsErc20", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mergeDeal",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mergeInfoMapping",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nftErc721", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addMerge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allAward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "astrErc20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ids", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lsErc20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mergeDeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mergeInfoMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftErc721", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "AddMergeEvent(uint256,address)": EventFragment;
    "MergeDealEvent(uint256,address,uint256[],uint8,uint256,uint256,uint256,uint256,uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddMergeEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MergeDealEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface AddMergeEventEventObject {
  id: BigNumber;
  user: string;
}
export type AddMergeEventEvent = TypedEvent<
  [BigNumber, string],
  AddMergeEventEventObject
>;

export type AddMergeEventEventFilter = TypedEventFilter<AddMergeEventEvent>;

export interface MergeDealEventEventObject {
  id: BigNumber;
  user: string;
  tokenIds: BigNumber[];
  status: number;
  lscAmount: BigNumber;
  lsAmount: BigNumber;
  newTokenId: BigNumber;
  burnTokenId: BigNumber;
  star: number;
}
export type MergeDealEventEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber[],
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ],
  MergeDealEventEventObject
>;

export type MergeDealEventEventFilter = TypedEventFilter<MergeDealEventEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface NftMerge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NftMergeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addMerge(
      _tokenIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    allAward(overrides?: CallOverrides): Promise<[BigNumber]>;

    astrErc20(overrides?: CallOverrides): Promise<[string]>;

    ids(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    lsErc20(overrides?: CallOverrides): Promise<[string]>;

    mergeDeal(
      _id: BigNumberish,
      _status: BigNumberish,
      _lscAmount: BigNumberish,
      _lsAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mergeInfoMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        user: string;
        status: number;
        lscAmount: BigNumber;
        lsAmount: BigNumber;
        newTokenId: BigNumber;
        burnTokenId: BigNumber;
      }
    >;

    nftAddress(overrides?: CallOverrides): Promise<[string]>;

    nftErc721(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdraw(
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawToken(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addMerge(
    _tokenIds: BigNumberish[],
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  allAward(overrides?: CallOverrides): Promise<BigNumber>;

  astrErc20(overrides?: CallOverrides): Promise<string>;

  ids(overrides?: CallOverrides): Promise<BigNumber>;

  lsErc20(overrides?: CallOverrides): Promise<string>;

  mergeDeal(
    _id: BigNumberish,
    _status: BigNumberish,
    _lscAmount: BigNumberish,
    _lsAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mergeInfoMapping(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
      user: string;
      status: number;
      lscAmount: BigNumber;
      lsAmount: BigNumber;
      newTokenId: BigNumber;
      burnTokenId: BigNumber;
    }
  >;

  nftAddress(overrides?: CallOverrides): Promise<string>;

  nftErc721(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdraw(
    recipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawToken(
    _tokenAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMerge(
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    allAward(overrides?: CallOverrides): Promise<BigNumber>;

    astrErc20(overrides?: CallOverrides): Promise<string>;

    ids(overrides?: CallOverrides): Promise<BigNumber>;

    lsErc20(overrides?: CallOverrides): Promise<string>;

    mergeDeal(
      _id: BigNumberish,
      _status: BigNumberish,
      _lscAmount: BigNumberish,
      _lsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mergeInfoMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        user: string;
        status: number;
        lscAmount: BigNumber;
        lsAmount: BigNumber;
        newTokenId: BigNumber;
        burnTokenId: BigNumber;
      }
    >;

    nftAddress(overrides?: CallOverrides): Promise<string>;

    nftErc721(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(recipient: string, overrides?: CallOverrides): Promise<void>;

    withdrawToken(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddMergeEvent(uint256,address)"(
      id?: BigNumberish | null,
      user?: string | null
    ): AddMergeEventEventFilter;
    AddMergeEvent(
      id?: BigNumberish | null,
      user?: string | null
    ): AddMergeEventEventFilter;

    "MergeDealEvent(uint256,address,uint256[],uint8,uint256,uint256,uint256,uint256,uint8)"(
      id?: BigNumberish | null,
      user?: string | null,
      tokenIds?: null,
      status?: null,
      lscAmount?: null,
      lsAmount?: null,
      newTokenId?: null,
      burnTokenId?: null,
      star?: null
    ): MergeDealEventEventFilter;
    MergeDealEvent(
      id?: BigNumberish | null,
      user?: string | null,
      tokenIds?: null,
      status?: null,
      lscAmount?: null,
      lsAmount?: null,
      newTokenId?: null,
      burnTokenId?: null,
      star?: null
    ): MergeDealEventEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addMerge(
      _tokenIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    allAward(overrides?: CallOverrides): Promise<BigNumber>;

    astrErc20(overrides?: CallOverrides): Promise<BigNumber>;

    ids(overrides?: CallOverrides): Promise<BigNumber>;

    lsErc20(overrides?: CallOverrides): Promise<BigNumber>;

    mergeDeal(
      _id: BigNumberish,
      _status: BigNumberish,
      _lscAmount: BigNumberish,
      _lsAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mergeInfoMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftAddress(overrides?: CallOverrides): Promise<BigNumber>;

    nftErc721(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdraw(
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawToken(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMerge(
      _tokenIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    allAward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    astrErc20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ids(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lsErc20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mergeDeal(
      _id: BigNumberish,
      _status: BigNumberish,
      _lscAmount: BigNumberish,
      _lsAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mergeInfoMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftErc721(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdraw(
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}

import { WagmiConfig, createConfig, configureChains } from "wagmi";

import { bsc, bscTestnet } from "viem/chains";
import { appWithTranslation } from "next-i18next";
import { InjectedConnector } from "wagmi/connectors/injected";
import { MetaMaskConnector } from "wagmi/connectors/metaMask";
import { WalletConnectConnector } from "wagmi/connectors/walletConnect";
import { publicProvider } from "wagmi/providers/public";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import Head from "next/head";
import { ZCOOL_XiaoWei } from "@next/font/google";
import type { AppProps } from "next/app";
import { Box, ChakraProvider } from "@chakra-ui/react";
import { ToastContainer } from "react-toastify";

import { theme } from "@/theme/theme";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import { ConfigProvider } from "@/context/ConfigContext";
import { infuraProvider } from "wagmi/providers/infura";
import { ContractsProvider } from "@/context/ContractsContext";

import "react-toastify/dist/ReactToastify.css";
import "@/styles/globals.css";
import { useRouter } from "next/router";
import { UserInfosProvider } from "@/context/userInfoContext";

export const cinzel = ZCOOL_XiaoWei({
  subsets: ["latin"],
  weight: "400",
});

export const isDev = process.env.NEXT_PUBLIC_BRANCH === "dev";
export const supportChains = isDev ? [bsc, bscTestnet] : [bsc];

// export const supportChains = [bscTestnet];
const notShowHeaderPaths = [
  "/synthesisDetail",
  "/personal/operation",
  "/personal/reward",
];

const { chains, publicClient, webSocketPublicClient } = configureChains(
  supportChains,
  [
    infuraProvider({ apiKey: "09aa6cafd8cb4cac9d725bcf0b817ee6" }),
    publicProvider(),
  ]
);
const queryClient = new QueryClient();
// Set up wagmi config
const config = createConfig({
  autoConnect: true,
  connectors: [
    new MetaMaskConnector({ chains }),
    new WalletConnectConnector({
      chains,
      options: {
        projectId: "5bfcecd0ffc981fa732653bff3fac489",
      },
    }),
    new InjectedConnector({
      chains,
      options: {
        name: "Injected",
        shimDisconnect: true,
      },
    }),
  ],
  publicClient,
  webSocketPublicClient,
});

function App({ Component, pageProps }: AppProps) {
  const showBg = true;
  const router = useRouter();

  const isShowHeader =
    notShowHeaderPaths.findIndex((item) => item === router.pathname) < 0;
  return (
    <Box
      as="main"
      className={cinzel.className}
      bgRepeat="no-repeat"
      bgSize="cover"
      bgColor="#000000"
    >
      <Head>
        <title>Lucky Star</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <QueryClientProvider client={queryClient}>
        <WagmiConfig config={config}>
          <ChakraProvider theme={theme}>
            <ConfigProvider>
              <ContractsProvider>
                <UserInfosProvider>
                  {isShowHeader ? <Header isTp={showBg} /> : <></>}

                  <Box
                    margin="0 auto"
                    maxWidth="1920px"
                    minWidth={{ base: "100%", md: "1440px" }}
                  >
                    <Box
                      paddingTop={isShowHeader ? "80px" : "0px "}
                      minHeight="100vh"
                    >
                      <Component {...pageProps} />
                      <Footer />
                    </Box>
                  </Box>
                  <ToastContainer className="toast-custom" />
                </UserInfosProvider>
              </ContractsProvider>
            </ConfigProvider>
          </ChakraProvider>
        </WagmiConfig>
      </QueryClientProvider>
    </Box>
  );
}
export default appWithTranslation(App);
